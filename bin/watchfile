#!/usr/bin/env bash

SCRIPT="$(basename $0)"
SILENT=

function ::now() {
  date "+%m/%d %H:%M:%S"
}

function ::log() {
  if [[ -z ${SILENT} ]]; then
    echo "[$(::now)] ${SCRIPT}: $@"
  fi
}

function ::debug() {
  ! [ -z "${DEBUG}" ] && ::log "$@"
}

function ::now_millis {
  echo $(date +%s%N | cut -b1-13)
}

function print_error() {
  echo -e "\e[31m\nERROR: $1 \e[0m\n"
}

function usage() {
  cat <<EOF
${SCRIPT} [--help|-h] [<--directory|-d <dir>>] <--file|-f <file>|--regx|-r <regx>> \
[--recursive|-R] [--silent|-s] <command arg1 arg2 ... >

Note that this script triggers on the following inotify filesystem events:
  close_write,moved_to,modify

--help|-h: Shows this help message and exits.
--directory|-d: The directory on which to listen to any file changes. (e.g. /tmp/foo)
    Note: Defaults to the current directory.
--file|-f: When this file changes, the command will be called.
--regx|-r: A regular expression that when a modified file's name matches, triggers the command.
    Note: Overrides --file.
--recursive|-r: Whether to watch directories recursively or not. Default: false.
--silent|-s: If set, no log messages will be created.

command arg1 arg2...: The command to execute when a file or file regx matches. You can use the
special name __file__ to replace it with the filename of the file that triggered the command.
EOF
}


directory="$(pwd)"
file=
regx=
command=
recursive=
while [ $# -gt 0 ]; do
  arg="$1"
  case "${arg}" in
    --silent|-s)
      SILENT=1
      ;;
    --directory|-d)
      directory="$2"
      shift
      ;;
    --file|-f)
      file="$2"
      shift
      ;;
    --regx|-r)
      regx="$2"
      shift
      ;;
    --recursive|-R)
      recursive=1
      ;;
    --help)
      usage
      exit 0
      ;;
    *)
      command="$@"
      break
      ;;
  esac
  shift
done

::debug "directory=${directory}"
::debug "file=${file}"
::debug "regx=${regx}"
::debug "command=${command}"
::debug "recursive=${recursive}"


if [ -z "${file}" ] && [ -z "${regx}" ]; then
  print_error "Either --file or --regx parameters must be given."
  usage
  exit 1
fi

if [ -z "${command}" ]; then
  print_error "No command was provided."
  usage
  exit 1
fi


::log "Watching directory: ${directory}"
params=(-e close_write,moved_to,modify -m "${directory}")
if [[ ${recursive} -eq 1 ]]; then
  params+=(-r)
fi

last_run=0
throttle_millis=250

function throttle_cmd {
  local cmd="$@"
  local curr_millis=$(::now_millis)
  local elapsed_millis=$((curr_millis-last_run))
  if [[ ${elapsed_millis} -gt ${throttle_millis} ]]; then
    last_run=$((curr_millis+1000)) # lock run for 1000 + ${throttle_millis}
    ::log "${cmd}"
    ${cmd}
    last_run=$(::now_millis) # allow run in ${throttle_millis}
  else
    ::debug "Command was throttled. \
Last run: ${last_run}. Current run: ${curr_millis}. \
Ellapsed millis: ${elapsed_millis}."
  fi
}

inotifywait "${params[@]}" |
  while read -r directory events filename; do
    ::debug "Events triggered: ${events}"
    # TODO: Set a minimum time treshold to trigger the event. At the moment a
    # single file save from emacs triggers two rapid-fire MODIFY events.
    filepath="${directory}${filename}"
    if ! [ -z ${regx} ]; then
      if [[ "${filepath}" =~ ${regx} ]]; then
        ::log "Matched regx: ${filepath}"
        effective_command=$(echo ${command} | sed 's|__file__|'${filepath}'|g')
        throttle_cmd ${effective_command}
        continue
      fi
    elif [ "${filename}" = "${file}" ]; then
      ::log "Matched filename: ${filename}"
      effective_command=$(echo ${command} | sed 's|__file__|'${filename}'|g')
      throttle_cmd ${effective_command}
      continue
    fi
    ::debug "Ignored filename: ${filename} at filepath: ${filepath}"
  done
