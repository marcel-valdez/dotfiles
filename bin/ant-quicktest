#!/usr/bin/env ruby

require 'optparse'

SUCCESS=0
FAILURE=1
RDBMS_OPTION = "-Dapn.conf.data.primary.datasource=AppianPrimaryDS"
CUSTOM_OPTION = "-DTEST_TYPE=custom"
CUSTOM_PATTERN_OPTION = "-Denv.CUSTOM_TEST_PATTERN"
FRAMEWORK_OPTION = "-DTEST_TYPE"

def exec_command(command)
  puts command
  if system(command)
    exit SUCCESS
  else
    exit FAILURE
  end
end

def get_custom_command(qualified_name, env_options)
  class_path = qualified_name.gsub!('.', '/')
  "ant quicktest #{env_options} #{RDBMS_OPTION} #{CUSTOM_OPTION} #{CUSTOM_PATTERN_OPTION}=#{class_path}.java"
end

def get_framework_command(framework, env_options)
  "ant quicktest #{env_options} #{RDBMS_OPTION} #{FRAMEWORK_OPTION}=#{framework}"
end

options = {}
OptionParser.new do |cmd_options|
  cmd_options.banner = "Usage: ant-quick-test [options]"
  cmd_options.on(
    "-f",
    "--framework [FRAMEWORK_NAME]",
    "Run an entire framework. Overrides -c. Example: --framework expression") do |option|
    options[:framework] = option
  end

  cmd_options.on(
    "-c",
    "--class [CLASS_NAME]",
    "Run a specific class. Example: --class com.appiancorp.expressions.PluginExpressionTest") do |option|
    options[:klass] = option
  end

  cmd_options.on(
    "-D",
    "-D[OPTION]",
    "Add options to the JVM. Example: -Dped.output.dir=/path/") do |option|
    options[:env] = option
  end
end.parse!

env_options = ""
if not options[:env].nil?
  env_options = "-D#{options[:env]}"
end

if not options[:framework].nil?
  exec_command get_framework_command(options[:framework], env_options)
elsif not options[:klass].nil?
  exec_command get_custom_command(options[:klass], env_options)
end
